// <auto-generated />
using System;
using CarExpo.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarExpo.Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250408162025_Init11")]
    partial class Init11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarExpo.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.Vehicles.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CarStatus")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufactureYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Mileage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Salestatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.Vehicles.CarImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.BahmanMotor", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("BahmanMotor", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Brilliance", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Brilliance", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Chery", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Chery", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Hyundai", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Hyundai", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.JAC", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("JAC", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.KermanMotor", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("KermanMotor");
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Kia", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Kia", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Lifan", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Lifan", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.ModiranKhodro", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("ModiranKhodro", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.ParsKhodro", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("ParsKhodro", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Peugeot", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Peugeot", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Renault", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Renault", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Saipa", b =>
                {
                    b.HasBaseType("CarExpo.Domain.Models.Vehicles.Car");

                    b.ToTable("Saipa", (string)null);
                });

            modelBuilder.Entity("CarExpo.Domain.Models.Vehicles.Car", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Users.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarExpo.Domain.Models.Vehicles.CarImage", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", "Car")
                        .WithMany("CarImages")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarExpo.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.BahmanMotor", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.BahmanMotor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Brilliance", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Brilliance", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Chery", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Chery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Hyundai", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Hyundai", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.JAC", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.JAC", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.KermanMotor", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.KermanMotor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Kia", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Kia", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Lifan", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Lifan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.ModiranKhodro", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.ModiranKhodro", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.ParsKhodro", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.ParsKhodro", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Peugeot", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Peugeot", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Renault", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Renault", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.CarBrands.Saipa", b =>
                {
                    b.HasOne("CarExpo.Domain.Models.Vehicles.Car", null)
                        .WithOne()
                        .HasForeignKey("CarExpo.Domain.Models.CarBrands.Saipa", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarExpo.Domain.Models.Users.User", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarExpo.Domain.Models.Vehicles.Car", b =>
                {
                    b.Navigation("CarImages");
                });
#pragma warning restore 612, 618
        }
    }
}
